{"ast":null,"code":"var express = require(\"express\");\n\nconst router = express.Router();\n\nvar cookieParser = require(\"cookie-parser\");\n\nconst bcrypt = require(\"bcryptjs\");\n\nvar db = require(\"../dbseed\");\n\nrouter.post(\"/companysignin\", function (req, res) {\n  console.log(\"Company Signin\");\n  console.log(req.body);\n  if (req.body.selectedOption === \"company\") var User = `SELECT * FROM CompanyData WHERE email = \"${req.body.identifier}\"`;else var User = `SELECT * FROM StudentData WHERE email = \"${req.body.identifier}\"`;\n  db.query(User, async (err, rows, fields) => {\n    if (err) console.log(err);else {\n      if (rows.length) {\n        let isValidPassword = false;\n        console.log(rows[0]);\n\n        try {\n          isValidPassword = await bcrypt.compare(req.body.password, rows[0].password);\n          console.log(isValidPassword);\n\n          if (isValidPassword === true) {\n            res.cookie(\"cookie\", \"admin\", {\n              maxAge: 900000,\n              httpOnly: false,\n              path: \"/\"\n            });\n            var user = {\n              email: req.body.identifier,\n              password: req.body.password\n            };\n            req.session.user = user;\n            console.log(\"Passwords Match\");\n            console.log(req.body);\n            res.status(200).send({\n              email: req.body.identifier,\n              selectedOption: req.body.selectedOption\n            });\n          } else {\n            req.session.user = null;\n            console.log(\"Passwords dont match\");\n            res.status(400).send({\n              problem: \"password\"\n            });\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      } else {\n        req.session.user = null;\n        console.log(\"User ID doesn't exist\");\n        res.status(400).send({\n          problem: \"username\"\n        });\n      }\n    }\n  }); //main function\n});\nmodule.exports = router;","map":{"version":3,"sources":["/Users/surbhi/Documents/STUDY/CMPE273/Projects/Handshake/backend/Routes/Signin.js"],"names":["express","require","router","Router","cookieParser","bcrypt","db","post","req","res","console","log","body","selectedOption","User","identifier","query","err","rows","fields","length","isValidPassword","compare","password","cookie","maxAge","httpOnly","path","user","email","session","status","send","problem","module","exports"],"mappings":"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","sourcesContent":["var express = require(\"express\");\nconst router = express.Router();\nvar cookieParser = require(\"cookie-parser\");\nconst bcrypt = require(\"bcryptjs\");\n\nvar db = require(\"../dbseed\");\n\nrouter.post(\"/companysignin\", function(req, res) {\n  console.log(\"Company Signin\");\n  console.log(req.body);\n\n  if (req.body.selectedOption === \"company\")\n    var User = `SELECT * FROM CompanyData WHERE email = \"${req.body.identifier}\"`;\n  else\n    var User = `SELECT * FROM StudentData WHERE email = \"${req.body.identifier}\"`;\n\n  db.query(User, async (err, rows, fields) => {\n    if (err) console.log(err);\n    else {\n      if (rows.length) {\n        let isValidPassword = false;\n        console.log(rows[0]);\n        try {\n          isValidPassword = await bcrypt.compare(\n            req.body.password,\n            rows[0].password\n          );\n\n          console.log(isValidPassword);\n          if (isValidPassword === true) {\n            res.cookie(\"cookie\", \"admin\", {\n              maxAge: 900000,\n              httpOnly: false,\n              path: \"/\"\n            });\n\n            var user = {\n              email: req.body.identifier,\n              password: req.body.password\n            };\n\n            req.session.user = user;\n            console.log(\"Passwords Match\");\n            console.log(req.body);\n            res.status(200).send({\n              email: req.body.identifier,\n              selectedOption: req.body.selectedOption\n            });\n          } else {\n            req.session.user = null;\n            console.log(\"Passwords dont match\");\n            res.status(400).send({ problem: \"password\" });\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      } else {\n        req.session.user = null;\n        console.log(\"User ID doesn't exist\");\n        res.status(400).send({ problem: \"username\" });\n      }\n    }\n  });\n  //main function\n});\n\nmodule.exports = router;\n"]},"metadata":{},"sourceType":"script"}